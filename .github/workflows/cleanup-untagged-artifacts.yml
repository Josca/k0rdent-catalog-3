name: Cleanup untagged artifacts

on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Preview only (true) or actually delete (false)'
        required: false
        default: 'true'

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token

      - name: List and optionally delete untagged versions
        env:
          REPO_OWNER: ${{ github.repository_owner }}
          DRY_RUN: ${{ github.event.inputs.dry-run }}
          PKG_PREFIX: "${{ github.event.repository.name }}/"
        run: |
          echo "Starting cleanup for owner: $REPO_OWNER"
          echo "Dry run mode: $DRY_RUN"

          if gh api "users/$REPO_OWNER" &>/dev/null; then
            API_BASE="users/$REPO_OWNER"
          else
            API_BASE="orgs/$REPO_OWNER"
          fi
          echo "Using API base: $API_BASE"

          # Get all container packages for user/org
          gh api "$API_BASE/packages?package_type=container" --paginate > packages-all.json
          jq --arg prefix "$PKG_PREFIX" '[.[] | select(.name | startswith($prefix))]' packages-all.json > packages.json

          PACKAGE_COUNT=$(jq length packages.json)
          echo "Found $PACKAGE_COUNT container packages"

          for i in $(seq 0 $((PACKAGE_COUNT - 1))); do
            PACKAGE_NAME=$(jq -r ".[$i].name" packages.json)
            echo ""
            echo "🔍 Processing package: $PACKAGE_NAME"
            encoded_pkg_name=$(jq -rn --arg p "$PACKAGE_NAME" '$p|@uri')

            # Get all versions of the package
            gh api "$API_BASE/packages/container/${encoded_pkg_name}/versions" --paginate > versions.json

            # Get untagged version IDs
            untagged_ids=$(jq -r '.[] | select(.metadata.container.tags == []) | .id' versions.json)
            count=$(echo "$untagged_ids" | wc -l)
            if [ -z "$untagged_ids" ]; then
              echo "✅ No untagged versions found."
              continue
            fi
            echo "⚠️ Found $count untagged version(s)."

            if [ "$DRY_RUN" = "true" ]; then
              echo "📝 Would delete the following versions:"
              echo "$untagged_ids"
            else
              echo "🗑️ Deleting $count untagged version(s)..."
              echo "$untagged_ids" | while read version_id; do
                echo "Deleting version $version_id..."
                gh api --method DELETE "$API_BASE/packages/container/${encoded_pkg_name}/versions/$version_id"
              done
            fi
          done
